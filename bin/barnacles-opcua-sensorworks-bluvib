#!/usr/bin/env node

const opcua = require('node-opcua');
const BarnaclesOPCUA = require('../lib/barnaclesopcua.js');


let barnaclesOPCUA = new BarnaclesOPCUA({ printErrors: true });

setTimeout(createDevice, 5000);

// Create a simulated Sensor-Works BluVib device
function createDevice() {
  const device = barnaclesOPCUA.namespace.addObject({
      organizedBy: barnaclesOPCUA.server.engine.addressSpace.rootFolder.objects,
      browseName: "5e4504b1071b/3"
  });

  barnaclesOPCUA.namespace.addAnalogDataItem({
    componentOf: device,
    browseName: "Temperature",
    engineeringUnits: opcua.standardUnits.degree_celsius,
    engineeringUnitsRange: { low: -40, high: 125 },
    minimumSamplingInterval: 1000,
    dataType: "Double",
    value: {
      get: function() {
        return new opcua.Variant({ dataType: opcua.DataType.Double,
                                   value: 25 + (Math.random() * 5) });
      }
    }
  });

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsX",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -64, high: 64 },
    axisScaleType: "Linear",
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 2560 },
      axisScaleType: opcua.EnumAxisScale.Linear,
      axisSteps: [ 0, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480,
                   520, 560, 600, 640, 680, 720, 760, 800, 840, 880, 920, 960,
                   1000, 1040, 1080, 1120, 1160, 1200, 1240, 1280, 1320, 1360,
                   1400, 1440, 1480, 1520, 1560, 1600, 1640, 1680, 1720, 1760,
                   1800, 1840, 1880, 1920, 1960, 2000, 2040, 2080, 2120, 2160,
                   2200, 2240, 2280, 2320, 2360, 2400, 2440, 2480, 2520 ]
    },
    dataType: opcua.DataType.Double,
    value: new opcua.Variant({ arrayType: opcua.VariantArrayType.Array,
                               dataType: opcua.DataType.Double,
                               value: Array.from({ length: 64 },
                                                 () => Math.random() - 0.5) })
  });

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsY",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -64, high: 64 },
    axisScaleType: "Linear",
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 2560 },
      axisScaleType: opcua.EnumAxisScale.Linear,
      axisSteps: [ 0, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480,
                   520, 560, 600, 640, 680, 720, 760, 800, 840, 880, 920, 960,
                   1000, 1040, 1080, 1120, 1160, 1200, 1240, 1280, 1320, 1360,
                   1400, 1440, 1480, 1520, 1560, 1600, 1640, 1680, 1720, 1760,
                   1800, 1840, 1880, 1920, 1960, 2000, 2040, 2080, 2120, 2160,
                   2200, 2240, 2280, 2320, 2360, 2400, 2440, 2480, 2520 ]
    },
    dataType: opcua.DataType.Double,
    value: new opcua.Variant({ arrayType: opcua.VariantArrayType.Array,
                               dataType: opcua.DataType.Double,
                               value: Array.from({ length: 64 },
                                                 () => Math.random() - 0.5) })
  });

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsZ",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -64, high: 64 },
    axisScaleType: "Linear",
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 2560 },
      axisScaleType: opcua.EnumAxisScale.Linear,
      axisSteps: [ 0, 40, 80, 120, 160, 200, 240, 280, 320, 360, 400, 440, 480,
                   520, 560, 600, 640, 680, 720, 760, 800, 840, 880, 920, 960,
                   1000, 1040, 1080, 1120, 1160, 1200, 1240, 1280, 1320, 1360,
                   1400, 1440, 1480, 1520, 1560, 1600, 1640, 1680, 1720, 1760,
                   1800, 1840, 1880, 1920, 1960, 2000, 2040, 2080, 2120, 2160,
                   2200, 2240, 2280, 2320, 2360, 2400, 2440, 2480, 2520 ]
    },
    dataType: opcua.DataType.Double,
    value: new opcua.Variant({ arrayType: opcua.VariantArrayType.Array,
                               dataType: opcua.DataType.Double,
                               value: Array.from({ length: 64 },
                                                 () => Math.random() - 0.5) })
  });

}


console.log('barnacles-opcua Sensor-Works BluVib sensor simulator');
