#!/usr/bin/env node

const opcua = require('node-opcua');
const BarnaclesOPCUA = require('../lib/barnaclesopcua.js');


let barnaclesOPCUA = new BarnaclesOPCUA({ printErrors: true });

setTimeout(createDevice, 5000);

// Create a simulated Sensor-Works BluVib device
function createDevice() {
  const device = barnaclesOPCUA.namespace.addObject({
      organizedBy: barnaclesOPCUA.server.engine.addressSpace.rootFolder.objects,
      browseName: "5e4504b1071b/3"
  });

  barnaclesOPCUA.namespace.addAnalogDataItem({
    componentOf: device,
    browseName: "Temperature",
    engineeringUnits: opcua.standardUnits.degree_Celsius,
    engineeringUnitsRange: { low: -40, high: 125 },
    minimumSamplingInterval: 1000,
    dataType: "Double",
    value: {
      get: function() {
        return new opcua.Variant({ dataType: opcua.DataType.Double,
                                   value: 25 + (Math.random() * 5) });
      }
    }
  });

/* ----- Uncomment when addYArrayItem() can be called successfully -----

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsX",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -100, high: 100 },
    axisScaleType: opcua.EnumAxisScale.Linear,
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 10000 },
      axisScaleType: opcua.EnumAxisScale.Linear
    },
    minimumSamplingInterval: 1000,
    dataType: "YArrayItemType",
    value: {
      get: function() {
        return new opcua.Variant({ dataType: opcua.DataType.Double,
                                   value: [ 0.1, 0.2, 0.3, 0.4 ] });
      }
    }
  });

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsY",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -100, high: 100 },
    axisScaleType: opcua.EnumAxisScale.Linear,
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 10000 },
      axisScaleType: opcua.EnumAxisScale.Linear
    },
    minimumSamplingInterval: 1000,
    dataType: "YArrayItemType",
    value: {
      get: function() {
        return new opcua.Variant({ dataType: opcua.DataType.Double,
                                   value: [ -0.1, -0.2, -0.3, -0.4 ] });
      }
    }
  });

  barnaclesOPCUA.namespace.addYArrayItem({
    componentOf: device,
    browseName: "AccelerationsZ",
    engineeringUnits: opcua.standardUnits.metre_per_second_squared,
    engineeringUnitsRange: { low: -100, high: 100 },
    axisScaleType: opcua.EnumAxisScale.Linear,
    xAxisDefinition: {
      engineeringUnits: opcua.standardUnits.microsecond,
      engineeringUnitsRange: { low: 0, high: 10000 },
      axisScaleType: opcua.EnumAxisScale.Linear
    },
    minimumSamplingInterval: 1000,
    dataType: "YArrayItemType",
    value: {
      get: function() {
        return new opcua.Variant({ dataType: opcua.DataType.Double,
                                   value: [ -1.1, -1.0, -0.9, -1.0 ] });
      }
    }
  });

  ----- Uncomment when addYArrayItem() can be called successfully ----- */

}


console.log('barnacles-opcua Sensor-Works BluVib sensor simulator');
